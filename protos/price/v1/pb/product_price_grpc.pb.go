// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: protos/price/v1/product_price.proto

package price

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductPrice_List_FullMethodName = "/price.ProductPrice/List"
	ProductPrice_Get_FullMethodName  = "/price.ProductPrice/Get"
)

// ProductPriceClient is the client API for ProductPrice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductPriceClient interface {
	List(ctx context.Context, in *ProductPriceListReq, opts ...grpc.CallOption) (*ProductPriceListRep, error)
	Get(ctx context.Context, in *ProductPriceGetReq, opts ...grpc.CallOption) (*ProductPriceMain, error)
}

type productPriceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductPriceClient(cc grpc.ClientConnInterface) ProductPriceClient {
	return &productPriceClient{cc}
}

func (c *productPriceClient) List(ctx context.Context, in *ProductPriceListReq, opts ...grpc.CallOption) (*ProductPriceListRep, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductPriceListRep)
	err := c.cc.Invoke(ctx, ProductPrice_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productPriceClient) Get(ctx context.Context, in *ProductPriceGetReq, opts ...grpc.CallOption) (*ProductPriceMain, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductPriceMain)
	err := c.cc.Invoke(ctx, ProductPrice_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductPriceServer is the server API for ProductPrice service.
// All implementations must embed UnimplementedProductPriceServer
// for forward compatibility.
type ProductPriceServer interface {
	List(context.Context, *ProductPriceListReq) (*ProductPriceListRep, error)
	Get(context.Context, *ProductPriceGetReq) (*ProductPriceMain, error)
	mustEmbedUnimplementedProductPriceServer()
}

// UnimplementedProductPriceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductPriceServer struct{}

func (UnimplementedProductPriceServer) List(context.Context, *ProductPriceListReq) (*ProductPriceListRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedProductPriceServer) Get(context.Context, *ProductPriceGetReq) (*ProductPriceMain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedProductPriceServer) mustEmbedUnimplementedProductPriceServer() {}
func (UnimplementedProductPriceServer) testEmbeddedByValue()                      {}

// UnsafeProductPriceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductPriceServer will
// result in compilation errors.
type UnsafeProductPriceServer interface {
	mustEmbedUnimplementedProductPriceServer()
}

func RegisterProductPriceServer(s grpc.ServiceRegistrar, srv ProductPriceServer) {
	// If the following call pancis, it indicates UnimplementedProductPriceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductPrice_ServiceDesc, srv)
}

func _ProductPrice_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductPriceListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductPriceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductPrice_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductPriceServer).List(ctx, req.(*ProductPriceListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductPrice_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductPriceGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductPriceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductPrice_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductPriceServer).Get(ctx, req.(*ProductPriceGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductPrice_ServiceDesc is the grpc.ServiceDesc for ProductPrice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductPrice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "price.ProductPrice",
	HandlerType: (*ProductPriceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ProductPrice_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ProductPrice_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/price/v1/product_price.proto",
}
